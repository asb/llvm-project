; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc < %s --mtriple=wasm32 -mattr=+reference-types | FileCheck %s

; Ensure the WebAssemblyRegColoring doesn't recolour WasmRef VRegs, as their
; associated metadata might give them differring wasm::ValTypes.

!0 = !{!"externref"}
!1 = !{!"funcref"}
!wasm.type_info = !{!0, !1}

%externref = type ptr addrspace(257)
%funcref = type ptr addrspace(258)

declare void @externref_user(%externref %ref)
declare void @funcref_user(%funcref %ref)

@g_externref = external addrspace(1) global %externref
@g_funcref = external addrspace(1) global %funcref

define void @vreg_recoloring() {
; CHECK-LABEL: vreg_recoloring:
; CHECK:         .functype vreg_recoloring () -> ()
; CHECK-NEXT:    .local externref, funcref
; CHECK-NEXT:  # %bb.0:
; CHECK-NEXT:    global.get g_externref
; CHECK-NEXT:    local.tee 0
; CHECK-NEXT:    call externref_user
; CHECK-NEXT:    local.get 0
; CHECK-NEXT:    call externref_user
; CHECK-NEXT:    global.get g_funcref
; CHECK-NEXT:    local.tee 1
; CHECK-NEXT:    call funcref_user
; CHECK-NEXT:    local.get 1
; CHECK-NEXT:    call funcref_user
; CHECK-NEXT:    # fallthrough-return
  %l_externref = load %externref, ptr addrspace(1) @g_externref
  call void @externref_user(%externref %l_externref)
  call void @externref_user(%externref %l_externref)
  %l_funcref = load %funcref, ptr addrspace(1) @g_funcref
  call void @funcref_user(%funcref %l_funcref)
  call void @funcref_user(%funcref %l_funcref)
  ret void
}
